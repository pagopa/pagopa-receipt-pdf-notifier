swagger: '2.0'
info:
  version: 0.1.12
  title: IO API for Public Administration Services
  contact:
    name: PagoPA S.p.A.
    url: https://docs.pagopa.it/io-guida-tecnica/
  x-logo:
    url: https://io.italia.it/assets/img/io-logo-blue.svg
  description: >
    # Warning

    **This is an experimental API that is (most probably) going to change as we evolve the IO platform.**

    # Introduction

    This is the documentation of the IO API for 3rd party services. This API enables Public Administration services to integrate with the IO platform. IO enables services to communicate with Italian citizens via the [IO app](https://io.italia.it/).

    # How to get an API key

    To get access to this API, you'll need to register on the [IO Developer Portal](https://developer.io.italia.it/).

    After the registration step, you have to click on the button that says `subscribe to the digital citizenship api` to receive the API key that you will use to authenticate the API calls.

    You will also receive an email with further instructions, including a fake Fiscal Code that you will be able to use to send test messages. Messages sent to the fake Fiscal Code will be notified to the email address used during the registration process on the developer portal.

    # Messages

    ## What is a message

    Messages are the primary form of communication enabled by the IO APIs. Messages are **personal** communications directed to a **specific citizen**. You will not be able to use this API to broadcast a message to a group of citizens, you will have to create and send a specific, personalized message to each citizen you want to communicate to.

    The recipient of the message (i.e. a citizen) is identified trough his [Fiscal Code](https://it.wikipedia.org/wiki/Codice_fiscale).

    ## Message format

    A message is conceptually very similar to an email and, in its simplest form, is composed of the following attributes:


















      * A required `subject`: a short description of the topic.
      * A required `markdown` body: a Markdown representation of the body (see
        below on what Markdown tags are allowed).
      * An optional `payment_data`: in case the message is a payment request,
        the _payment data_ will enable the recipient to pay the requested amount
        via [PagoPA](https://www.agid.gov.it/it/piattaforme/pagopa).
      * An optional `due_date`: a _due date_ that let the recipient
        add a reminder when receiving the message. The format for all
        dates is [ISO8601](https://it.wikipedia.org/wiki/ISO_8601) with time
        information and UTC timezone (ie. "2018-10-13T00:00:00.000Z").
      * An optional `feature_level_type`: the kind of the submitted message.

        It can be:
        - `STANDARD` for normal messages;
        - `ADVANCED` to enable premium features.

        Default is `STANDARD`.

    ## Allowed Markdown formatting

    Not all Markdown formatting is currently available. Currently you can use the following formatting:


















      * Headings
      * Text stylings (bold, italic, etc...)
      * Lists (bullet and numbered)

    ## Sending a message to a citizen

    Not every citizen will be interested in what you have to say and not every citizen you want to communicate to will be registered on IO. For this reason, before sending a message you need to check whether the recipient is registered on the platform and that he has not yet opted out from receiving messages from you.

    The process for sending a message is made of 3 steps:



















      1. Call [getProfile](#operation/getProfile): if the profile does not exist
         (i.e. you get a 404 response) or if the recipient has opted-out from
         your service (the response contains `sender_allowed: false`), you
         cannot send the message and you must stop here.
      1. Call [submitMessageforUser](#operation/submitMessageforUser) to submit
         a new message.
      1. (optional) Call [getMessage](#operation/getMessage) to check whether
         the message has been notified to the recipient.
host: api.io.pagopa.it
basePath: /api/v1
schemes:
  - https
security:
  - SubscriptionKey: []
paths:
  /messages:
    post:
      operationId: submitMessageforUserWithFiscalCodeInBody
      summary: Submit a Message passing the user fiscal_code in the request body
      description: >-
        Submits a message to a user with STANDARD or ADVANCED features based on `feature_level_type` value.

        On error, the reason is returned in the response payload.

        In order to call `submitMessageforUser`, before sending any message,

        the sender MUST call `getProfile` and check that the profile exists

        (for the specified fiscal code) and that the `sender_allowed` field

        of the user's profile it set to `true`.
      parameters:
        - name: message
          in: body
          schema:
            $ref: '#/definitions/NewMessage'
          x-examples:
            application/json:
              time_to_live: 3600
              content:
                subject: ipsum labore deserunt fugiat
                markdown: >-
                  Nullam dapibus metus sed elementum efficitur. Curabitur facilisis sagittis risus nec sodales.

                  Vestibulum in eros sapien. Donec ac odio sit amet dui semper ornare eget nec odio. Pellentesque habitant

                  morbi tristique senectus et netus et malesuada fames ac turpis egestas. Praesent nibh ex, mattis sit amet

                  felis id, sodales euismod velit. Lorem ipsum dolor sit amet, consectetur adipiscing elit.
      responses:
        '201':
          description: Message created.
          schema:
            $ref: '#/definitions/CreatedMessage'
          headers:
            Location:
              type: string
              description: >-
                Location (URL) of created message resource.

                A GET request to this URL returns the message status and details.
          examples:
            application/json:
              id: 01BX9NSMKVXXS5PSP2FATZMYYY
        '400':
          description: Invalid payload.
          schema:
            $ref: '#/definitions/ProblemJson'
          examples: {}
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '429':
          description: Too many requests
        '500':
          description: The message cannot be delivered.
          schema:
            $ref: '#/definitions/ProblemJson'
  /profiles:
    post:
      operationId: getProfileByPOST
      summary: Get a User Profile using POST
      description: >-
        Returns the preferences for the user identified by the

        fiscal code provided in the request body. The field `sender_allowed` is set fo `false` in case

        the service which is calling the API has been disabled by the user.
      parameters:
        - name: payload
          in: body
          schema:
            $ref: '#/definitions/FiscalCodePayload'
      responses:
        '200':
          description: Found.
          schema:
            $ref: '#/definitions/LimitedProfile'
          examples:
            application/json:
              email: foobar@example.com
              version: 1
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '404':
          description: No user found for the provided fiscal code.
          schema:
            $ref: '#/definitions/ProblemJson'
        '429':
          description: Too many requests
definitions:
  FiscalCodePayload:
    type: object
    properties:
      fiscal_code:
        $ref: '#/definitions/FiscalCode'
    required:
      - fiscal_code * x
  LimitedProfile:
    description: |-
      Describes the citizen's profile, mostly interesting for preferences
      attributes.
    type: object
    properties:
      sender_allowed:
        type: boolean
        description: |-
          True in case the service that made the request can send
          messages to the user identified by this profile (false otherwise).
      preferred_languages:
        type: array
        items:
          type: string
          x-extensible-enum:
            - it_IT
            - en_GB
            - es_ES
            - de_DE
            - fr_FR
          example: it_IT
        description: >-
          Indicates the User's preferred written or spoken languages in order

          of preference. Generally used for selecting a localized User interface. Valid

          values are concatenation of the ISO 639-1 two letter language code, an underscore,

          and the ISO 3166-1 2 letter country code; e.g., 'en_US' specifies the language

          English and country US.
    required:
      - sender_allowed
  ProblemJson:
    type: object
    properties:
      type:
        type: string
        format: uri
        description: |-
          An absolute URI that identifies the problem type. When dereferenced,
          it SHOULD provide human-readable documentation for the problem type
          (e.g., using HTML).
        default: about:blank
        example: https://example.com/problem/constraint-violation
      title:
        type: string
        description: |-
          A short, summary of the problem type. Written in english and readable
          for engineers (usually not suited for non technical stakeholders and
          not localized); example: Service Unavailable
      status:
        type: integer
        format: int32
        description: >-
          The HTTP status code generated by the origin server for this occurrence

          of the problem.
        minimum: 100
        maximum: 600
        exclusiveMaximum: true
        example: 200
      detail:
        type: string
        description: |-
          A human readable explanation specific to this occurrence of the
          problem.
        example: There was an error processing the request
      instance:
        type: string
        format: uri
        description: "An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced. "
  NewMessage:
    type: object
    properties:
      time_to_live:
        $ref: '#/definitions/TimeToLiveSeconds'
      content:
        $ref: '#/definitions/MessageContent'
      default_addresses:
        type: object
        description: |-
          Default addresses for notifying the recipient of the message in case
          no address for the related channel is set in his profile.
        properties:
          email:
            type: string
            format: email
            example: foobar@example.com
      fiscal_code:
        $ref: '#/definitions/FiscalCode'
      feature_level_type:
        $ref: '#/definitions/FeatureLevelType'
    required:
      - content
  CreatedMessage:
    type: object
    properties:
      id:
        type: string
        description: The identifier of the created message.
  TimeToLiveSeconds:
    type: integer
    default: 3600
    minimum: 3600
    maximum: 604800
    description: |-
      This parameter specifies for how long (in seconds) the system will
      try to deliver the message to the channels configured by the user.
    example: 3600
  FeatureLevelType:
    type: string
    default: STANDARD
    x-extensible-enum:
      - STANDARD
      - ADVANCED
    example: STANDARD
  MessageContent:
    allOf:
      - $ref: '#/definitions/MessageContentBase'
      - type: object
        properties:
          payment_data:
            $ref: '#/definitions/PaymentData'
          prescription_data:
            $ref: '#/definitions/PrescriptionData'
          legal_data:
            $ref: '#/definitions/LegalData'
          eu_covid_cert:
            $ref: '#/definitions/EUCovidCert'
          third_party_data:
            $ref: '#/definitions/ThirdPartyData'
          due_date:
            $ref: '#/definitions/Timestamp'
  PrescriptionData:
    type: object
    description: Metadata needed to process medical prescriptions.
    properties:
      nre:
        $ref: '#/definitions/PrescriptionNRE'
      iup:
        $ref: '#/definitions/PrescriptionIUP'
      prescriber_fiscal_code:
        $ref: '#/definitions/PrescriberFiscalCode'
    required:
      - nre
  PrescriptionNRE:
    description: >-
      The field *Numero ricetta elettronica* identifies the medical prescription at national level.
    type: string
    minLength: 15
    maxLength: 15
  PrescriptionIUP:
    description: >-
      The field *Identificativo Unico di Prescrizione* identifies the medical prescription at regional level.
    type: string
    minLength: 1
    maxLength: 16
  PrescriberFiscalCode:
    type: string
    description: Fiscal code of the Doctor that made the prescription.
    format: FiscalCode
    x-import: '@pagopa/ts-commons/lib/strings'
    example: TCNZRO80R13C555Y
  ServiceId:
    type: string
    description: |-
      The ID of the Service. Equals the subscriptionId of a registered
      API user.
    minLength: 1
  Timestamp:
    type: string
    format: UTCISODateFromString
    description: A date-time field in ISO-8601 format and UTC timezone.
    x-import: '@pagopa/ts-commons/lib/dates'
    example: '2018-10-13T00:00:00.000Z'
  ThirdPartyData:
    type: object
    description: >-
      Payload containing all information needed to retrieve and visualize third party message details
    properties:
      id:
        type: string
        description: >-
          Unique id for retrieving third party enriched information about the message
        minLength: 1
      original_sender:
        type: string
        description: Either a ServiceId or a simple string representing the sender name
        minLength: 1
      original_receipt_date:
        $ref: '#/definitions/Timestamp'
      has_attachments:
        type: boolean
        default: false
      summary:
        type: string
        minLength: 1
    required:
      - id
  MessageContentBase:
    type: object
    properties:
      subject:
        type: string
        description: >-
          The (optional) subject of the message - note that only some notification

          channels support the display of a subject. When a subject is not provided,

          one gets generated from the client attributes.
        minLength: 10
        maxLength: 120
        example: Welcome new user !
      markdown:
        type: string
        description: >-
          The full version of the message, in plain text or Markdown format. The

          content of this field will be delivered to channels that don't have any

          limit in terms of content size (e.g. email, etc...).
        minLength: 80
        maxLength: 10000
        example: |-
          # This is a markdown header

          to show how easily markdown can be converted to **HTML**

          Remember: this has to be a long text.
    required:
      - subject
      - markdown
  PaymentData:
    allOf:
      - $ref: '#/definitions/PaymentDataBase'
      - type: object
        properties:
          payee:
            $ref: '#/definitions/Payee'
  PaymentDataBase:
    type: object
    description: Metadata needed to process pagoPA payments.
    properties:
      amount:
        description: >-
          Amount of payment in euro cent. PagoPA accepts up to 9999999999 euro cents.
        type: integer
        minimum: 1
        maximum: 9999999999
      notice_number:
        description: >-
          The field ["Numero Avviso"](https://pagopa-specifichepagamenti.readthedocs.io/it/latest/_docs/Capitolo7.html#il-numero-avviso-e-larchivio-dei-pagamenti-in-attesa) of pagoPa, needed to identify the payment. Format is `<aux digit (1n)>[<application code> (2n)]<codice IUV (15|17n)>`. See [pagoPa specs](https://www.agid.gov.it/sites/default/files/repository_files/specifiche_attuative_pagamenti_1_3_1_0.pdf) for more info on this field and the IUV.
        type: string
        pattern: ^[0123][0-9]{17}$
      invalid_after_due_date:
        type: boolean
        default: false
    required:
      - amount
      - notice_number
  Payee:
    type: object
    description: Metadata needed to explicit payment's payee.
    properties:
      fiscal_code:
        $ref: '#/definitions/OrganizationFiscalCode'
    required:
      - fiscal_code
  OrganizationFiscalCode:
    type: string
    description: Organization fiscal code.
    format: OrganizationFiscalCode
    x-import: '@pagopa/ts-commons/lib/strings'
    example: '12345678901'
  FiscalCode:
    type: string
    description: User's fiscal code.
    format: FiscalCode
    x-import: '@pagopa/ts-commons/lib/strings'
    example: SPNDNL80R13C555X
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  SubscriptionKey:
    type: apiKey
    name: Ocp-Apim-Subscription-Key
    in: header
    description: >-
      The API key obtained through the developer portal or the getService operation.
