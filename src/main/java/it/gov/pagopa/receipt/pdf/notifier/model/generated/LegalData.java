/*
 * IO API for Public Administration Services
 * # Warning **This is an experimental API that is (most probably) going to change as we evolve the IO platform.** # Introduction This is the documentation of the IO API for 3rd party services. This API enables Public Administration services to integrate with the IO platform. IO enables services to communicate with Italian citizens via the [IO app](https://io.italia.it/). # How to get an API key To get access to this API, you'll need to register on the [IO Developer Portal](https://developer.io.italia.it/). After the registration step, you have to click on the button that says `subscribe to the digital citizenship api` to receive the API key that you will use to authenticate the API calls. You will also receive an email with further instructions, including a fake Fiscal Code that you will be able to use to send test messages. Messages sent to the fake Fiscal Code will be notified to the email address used during the registration process on the developer portal. # Messages ## What is a message Messages are the primary form of communication enabled by the IO APIs. Messages are **personal** communications directed to a **specific citizen**. You will not be able to use this API to broadcast a message to a group of citizens, you will have to create and send a specific, personalized message to each citizen you want to communicate to. The recipient of the message (i.e. a citizen) is identified trough his [Fiscal Code](https://it.wikipedia.org/wiki/Codice_fiscale). ## Message format A message is conceptually very similar to an email and, in its simplest form, is composed of the following attributes:    * A required `subject`: a short description of the topic.   * A required `markdown` body: a Markdown representation of the body (see     below on what Markdown tags are allowed).   * An optional `payment_data`: in case the message is a payment request,     the _payment data_ will enable the recipient to pay the requested amount     via [PagoPA](https://www.agid.gov.it/it/piattaforme/pagopa).   * An optional `due_date`: a _due date_ that let the recipient     add a reminder when receiving the message. The format for all     dates is [ISO8601](https://it.wikipedia.org/wiki/ISO_8601) with time     information and UTC timezone (ie. \"2018-10-13T00:00:00.000Z\").   * An optional `feature_level_type`: the kind of the submitted message.      It can be:     - `STANDARD` for normal messages;     - `ADVANCED` to enable premium features.      Default is `STANDARD`.  ## Allowed Markdown formatting Not all Markdown formatting is currently available. Currently you can use the following formatting:    * Headings   * Text stylings (bold, italic, etc...)   * Lists (bullet and numbered)  ## Sending a message to a citizen Not every citizen will be interested in what you have to say and not every citizen you want to communicate to will be registered on IO. For this reason, before sending a message you need to check whether the recipient is registered on the platform and that he has not yet opted out from receiving messages from you. The process for sending a message is made of 3 steps:    1. Call [getProfile](#operation/getProfile): if the profile does not exist      (i.e. you get a 404 response) or if the recipient has opted-out from      your service (the response contains `sender_allowed: false`), you      cannot send the message and you must stop here.   1. Call [submitMessageforUser](#operation/submitMessageforUser) to submit      a new message.   1. (optional) Call [getMessage](#operation/getMessage) to check whether      the message has been notified to the recipient. 
 *
 * The version of the OpenAPI document: 3.30.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.gov.pagopa.receipt.pdf.notifier.model.generated;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import it.gov.pagopa.receipt.pdf.notifier.client.generated.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * LegalData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-23T14:54:01.440130+02:00[Europe/Rome]")
public class LegalData {
  public static final String SERIALIZED_NAME_SENDER_MAIL_FROM = "sender_mail_from";
  @SerializedName(SERIALIZED_NAME_SENDER_MAIL_FROM)
  private String senderMailFrom;

  public static final String SERIALIZED_NAME_HAS_ATTACHMENT = "has_attachment";
  @SerializedName(SERIALIZED_NAME_HAS_ATTACHMENT)
  private Boolean hasAttachment = false;

  public static final String SERIALIZED_NAME_MESSAGE_UNIQUE_ID = "message_unique_id";
  @SerializedName(SERIALIZED_NAME_MESSAGE_UNIQUE_ID)
  private String messageUniqueId;

  public static final String SERIALIZED_NAME_ORIGINAL_MESSAGE_URL = "original_message_url";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_MESSAGE_URL)
  private String originalMessageUrl;

  public static final String SERIALIZED_NAME_PEC_SERVER_SERVICE_ID = "pec_server_service_id";
  @SerializedName(SERIALIZED_NAME_PEC_SERVER_SERVICE_ID)
  private String pecServerServiceId;

  public LegalData() {
  }

  public LegalData senderMailFrom(String senderMailFrom) {
    
    this.senderMailFrom = senderMailFrom;
    return this;
  }

   /**
   * Get senderMailFrom
   * @return senderMailFrom
  **/
  @javax.annotation.Nonnull
  public String getSenderMailFrom() {
    return senderMailFrom;
  }


  public void setSenderMailFrom(String senderMailFrom) {
    this.senderMailFrom = senderMailFrom;
  }


  public LegalData hasAttachment(Boolean hasAttachment) {
    
    this.hasAttachment = hasAttachment;
    return this;
  }

   /**
   * Get hasAttachment
   * @return hasAttachment
  **/
  @javax.annotation.Nonnull
  public Boolean getHasAttachment() {
    return hasAttachment;
  }


  public void setHasAttachment(Boolean hasAttachment) {
    this.hasAttachment = hasAttachment;
  }


  public LegalData messageUniqueId(String messageUniqueId) {
    
    this.messageUniqueId = messageUniqueId;
    return this;
  }

   /**
   * Get messageUniqueId
   * @return messageUniqueId
  **/
  @javax.annotation.Nonnull
  public String getMessageUniqueId() {
    return messageUniqueId;
  }


  public void setMessageUniqueId(String messageUniqueId) {
    this.messageUniqueId = messageUniqueId;
  }


  public LegalData originalMessageUrl(String originalMessageUrl) {
    
    this.originalMessageUrl = originalMessageUrl;
    return this;
  }

   /**
   * Get originalMessageUrl
   * @return originalMessageUrl
  **/
  @javax.annotation.Nullable
  public String getOriginalMessageUrl() {
    return originalMessageUrl;
  }


  public void setOriginalMessageUrl(String originalMessageUrl) {
    this.originalMessageUrl = originalMessageUrl;
  }


  public LegalData pecServerServiceId(String pecServerServiceId) {
    
    this.pecServerServiceId = pecServerServiceId;
    return this;
  }

   /**
   * The ID of the Service. Equals the subscriptionId of a registered API user.
   * @return pecServerServiceId
  **/
  @javax.annotation.Nullable
  public String getPecServerServiceId() {
    return pecServerServiceId;
  }


  public void setPecServerServiceId(String pecServerServiceId) {
    this.pecServerServiceId = pecServerServiceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegalData legalData = (LegalData) o;
    return Objects.equals(this.senderMailFrom, legalData.senderMailFrom) &&
        Objects.equals(this.hasAttachment, legalData.hasAttachment) &&
        Objects.equals(this.messageUniqueId, legalData.messageUniqueId) &&
        Objects.equals(this.originalMessageUrl, legalData.originalMessageUrl) &&
        Objects.equals(this.pecServerServiceId, legalData.pecServerServiceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(senderMailFrom, hasAttachment, messageUniqueId, originalMessageUrl, pecServerServiceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegalData {\n");
    sb.append("    senderMailFrom: ").append(toIndentedString(senderMailFrom)).append("\n");
    sb.append("    hasAttachment: ").append(toIndentedString(hasAttachment)).append("\n");
    sb.append("    messageUniqueId: ").append(toIndentedString(messageUniqueId)).append("\n");
    sb.append("    originalMessageUrl: ").append(toIndentedString(originalMessageUrl)).append("\n");
    sb.append("    pecServerServiceId: ").append(toIndentedString(pecServerServiceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sender_mail_from");
    openapiFields.add("has_attachment");
    openapiFields.add("message_unique_id");
    openapiFields.add("original_message_url");
    openapiFields.add("pec_server_service_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sender_mail_from");
    openapiRequiredFields.add("has_attachment");
    openapiRequiredFields.add("message_unique_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LegalData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LegalData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LegalData is not found in the empty JSON string", LegalData.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LegalData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LegalData` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LegalData.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("sender_mail_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender_mail_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender_mail_from").toString()));
      }
      if (!jsonObj.get("message_unique_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message_unique_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message_unique_id").toString()));
      }
      if ((jsonObj.get("original_message_url") != null && !jsonObj.get("original_message_url").isJsonNull()) && !jsonObj.get("original_message_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_message_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_message_url").toString()));
      }
      if ((jsonObj.get("pec_server_service_id") != null && !jsonObj.get("pec_server_service_id").isJsonNull()) && !jsonObj.get("pec_server_service_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pec_server_service_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pec_server_service_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LegalData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LegalData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LegalData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LegalData.class));

       return (TypeAdapter<T>) new TypeAdapter<LegalData>() {
           @Override
           public void write(JsonWriter out, LegalData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LegalData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LegalData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LegalData
  * @throws IOException if the JSON string is invalid with respect to LegalData
  */
  public static LegalData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LegalData.class);
  }

 /**
  * Convert an instance of LegalData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

